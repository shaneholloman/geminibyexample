{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|\\.|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gemini by Example","text":"<p>A hands-on introduction to using the Google Gemini API through annotated example programs.</p>"},{"location":"#overview","title":"Overview","text":"<p>Gemini by Example provides step-by-step tutorials for learning how to use the Gemini API in Python. The project features:</p> <ul> <li> <p>Simple, commented examples that build from basic to advanced usage</p> </li> <li> <p>Side-by-side code and explanations</p> </li> <li> <p>Runnable shell commands with expected outputs</p> </li> <li> <p>Examples organized by category</p> </li> <li> <p>Support for images to illustrate concepts</p> </li> </ul>"},{"location":"#sections","title":"Sections","text":"<ul> <li> <p>Text - 5 examples</p> </li> <li> <p>Images - 5 examples</p> </li> <li> <p>Audio - 3 examples</p> </li> <li> <p>Video - 4 examples</p> </li> <li> <p>PDFs and other data types - 3 examples</p> </li> <li> <p>Agentic behaviour - 4 examples</p> </li> <li> <p>Token counting &amp; context windows - 4 examples</p> </li> <li> <p>Miscellaneous - 5 examples</p> </li> </ul>"},{"location":"agentic-behaviour/","title":"Agentic behaviour","text":""},{"location":"agentic-behaviour/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>Function calling &amp; tool use</p> </li> <li> <p>Code execution</p> </li> <li> <p>Model Context Protocol</p> </li> <li> <p>Grounded responses with search tool</p> </li> </ul>"},{"location":"agentic-behaviour/code-execution/","title":"Code execution","text":"<p>This example demonstrates how to use the Gemini API to execute code (agent-style) and calculate the sum of the first 50 prime numbers.</p> <p>Import the necessary libraries. Make sure you have the rich library installed!</p> <pre><code>from google import genai\nfrom google.genai import types\nimport os\nfrom rich.console import Console\nfrom rich.markdown import Markdown\nfrom rich.syntax import Syntax\nfrom rich.panel import Panel\n</code></pre> <p>Initialize the rich console and the Gemini client</p> <pre><code>console = Console()\nclient = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Configure the model to use the code execution tool. Note that not all models support code execution. The code execution environment includes a number of popular libraries like sklearn, matplotlib, pandas, pdfminer and so on. You can't install your own libraries.</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=\"What is the sum of the first 50 prime numbers? \"\n    \"Generate and run code for the calculation, and make sure you get all 50.\",\n    config=types.GenerateContentConfig(\n        tools=[types.Tool(code_execution=types.ToolCodeExecution)]\n    ),\n)\n\n\nfor part in response.candidates[0].content.parts:\n    if part.text is not None:\n        console.print(Markdown(part.text))\n\n    if part.executable_code is not None:\n        code = part.executable_code.code\n</code></pre> <p>Detect language (simple approach)</p> <pre><code>language = (\n            \"python\"\n            if \"def \" in code or \"import \" in code or \"print(\" in code\n            else \"text\"\n        )\n        console.print(\n            Panel(\n                Syntax(code, language, theme=\"monokai\", line_numbers=True),\n                title=\"Code\",\n                border_style=\"blue\",\n            )\n        )\n\n    if part.code_execution_result is not None:\n        console.print(\n            Panel(\n                part.code_execution_result.output,\n                title=\"Output\",\n                border_style=\"green\",\n            )\n        )\n\n    if part.inline_data is not None:\n        console.print(\n            \"[yellow]Image data available but cannot be displayed in terminal[/yellow]\"\n        )\n\n    console.print(\"---\")\n</code></pre>"},{"location":"agentic-behaviour/code-execution/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai rich\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python code-execution.py\nOkay, I can help you find the sum of the first 50 prime numbers. Here's how I'll approach this:                                       \n 1 Generate a list of the first 50 prime numbers. I'll need an efficient way to identify prime numbers. I can use the Sieve of        \n   Eratosthenes method or a simpler trial division approach.                                                                          \n 2 Sum the prime numbers. Once I have the list, I'll simply add them up.                                                              \nHere's the Python code to accomplish this:                                                                                            \n---\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502    1 def is_prime(n):                                                                                                              \u2502\n\u2502    2     \"\"\"Efficiently determine if a number is prime.\"\"\"                                                                         \u2502\n\u2502    3     if n &lt;= 1:                                                                                                                \u2502\n\u2502    4         return False                                                                                                          \u2502\n\u2502    5     if n &lt;= 3:                                                                                                                \u2502\n\u2502    6         return True                                                                                                           \u2502\n\u2502    7     if n % 2 == 0 or n % 3 == 0:                                                                                              \u2502\n\u2502    8         return False                                                                                                          \u2502\n\u2502    9     i = 5                                                                                                                     \u2502\n\u2502   10     while i * i &lt;= n:                                                                                                         \u2502\n\u2502   11         if n % i == 0 or n % (i + 2) == 0:                                                                                    \u2502\n\u2502   12             return False                                                                                                      \u2502\n\u2502   13         i += 6                                                                                                                \u2502\n\u2502   14     return True                                                                                                               \u2502\n\u2502   15                                                                                                                               \u2502\n\u2502   16 primes = []                                                                                                                   \u2502\n\u2502   17 num = 2                                                                                                                       \u2502\n\u2502   18 while len(primes) &lt; 50:                                                                                                       \u2502\n\u2502   19     if is_prime(num):                                                                                                         \u2502\n\u2502   20         primes.append(num)                                                                                                    \u2502\n\u2502   21     num += 1                                                                                                                  \u2502\n\u2502   22                                                                                                                               \u2502\n\u2502   23 print(f'{primes=}')                                                                                                           \u2502\n\u2502   24 print(f'{sum(primes)=}')                                                                                                      \u2502\n\u2502   25                                                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n---\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,   \u2502\n\u2502 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]                                \u2502\n\u2502 sum(primes)=5117                                                                                                                   \u2502\n\u2502                                                                                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n---\nThe sum of the first 50 prime numbers is 5117.                                                                                        \n---\n</code></pre>"},{"location":"agentic-behaviour/code-execution/#images","title":"Images","text":"<p> - code_execution</p>"},{"location":"agentic-behaviour/code-execution/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"agentic-behaviour/function-calling-tool-use/","title":"Function calling &amp; tool use","text":"<p>This example demonstrates how to use the Gemini API to call external functions.</p> <p>Import necessary libraries</p> <pre><code>import os\nfrom datetime import datetime\nfrom google import genai\nfrom google.genai import types\n</code></pre> <p>Define the function to get temperature for a location. In a real application, this would call a weather API service like OpenWeatherMap or WeatherAPI</p> <pre><code>def get_current_temperature(location: str) -&gt; dict:\n    \"\"\"Gets the current temperature for a given location.\n\n    Note: This is a simplified mock implementation. In a real application,\n    this function would make an API call to a weather service provider.\n    \"\"\"\n    sample_temperatures = {\n        \"London\": 16,\n        \"New York\": 23,\n        \"Tokyo\": 28,\n        \"Sydney\": 20,\n        \"Paris\": 18,\n        \"Berlin\": 17,\n        \"Cairo\": 32,\n        \"Moscow\": 10,\n    }\n    temp = sample_temperatures.get(location, 21)\n    return {\"location\": location, \"temperature\": temp, \"unit\": \"Celsius\"}\n</code></pre> <p>Define the function to check appointment availability. In a real application, this would query a calendar API like Google Calendar or a booking system. For this example, we're using hard-coded busy slots.</p> <pre><code>def check_appointment_availability(date: str, time: str) -&gt; dict:\n    \"\"\"Checks if there's availability for an appointment at the given date and time.\"\"\"\n    busy_slots = [\n        {\"date\": \"2024-07-04\", \"times\": [\"14:00\", \"15:00\", \"16:00\"]},\n        {\"date\": \"2024-07-05\", \"times\": [\"09:00\", \"10:00\", \"11:00\"]},\n        {\"date\": \"2024-07-10\", \"times\": [\"13:00\", \"14:00\"]},\n    ]\n\n    try:\n        datetime.strptime(date, \"%Y-%m-%d\")\n    except ValueError:\n        return {\n            \"available\": False,\n            \"error\": \"Invalid date format. Please use YYYY-MM-DD.\",\n        }\n\n    try:\n        datetime.strptime(time, \"%H:%M\")\n    except ValueError:\n        return {\n            \"available\": False,\n            \"error\": \"Invalid time format. Please use HH:MM in 24-hour format.\",\n        }\n\n    for slot in busy_slots:\n        if slot[\"date\"] == date and time in slot[\"times\"]:\n            return {\n                \"available\": False,\n                \"message\": f\"The slot on {date} at {time} is already booked.\",\n            }\n\n    return {\n        \"available\": True,\n        \"message\": f\"The slot on {date} at {time} is available for booking.\",\n    }\n</code></pre> <p>For Example 1, we will call a single function with Gemini.</p> <pre><code>print(\"\\n--- Example 1: Basic Function Calling ---\\n\")\n</code></pre> <p>First, we define the function declaration that will be provided to the model.</p> <pre><code>weather_function = {\n    \"name\": \"get_current_temperature\",\n    \"description\": \"Gets the current temperature for a given location.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city name, e.g. San Francisco\",\n            },\n        },\n        \"required\": [\"location\"],\n    },\n}\n</code></pre> <p>Create a client and configure it with the function declaration</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\ntools = types.Tool(function_declarations=[weather_function])\nconfig = types.GenerateContentConfig(tools=[tools])\n</code></pre> <p>Send a request to Gemini that will likely trigger the function</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash-lite\",\n    contents=\"What's the temperature in London?\",\n    config=config,\n)\n</code></pre> <p>Check if Gemini responded with a function call Assumes Gemini will always respond with a function call.</p> <pre><code>function_call = response.candidates[0].content.parts[0].function_call\nprint(f\"Function to call: {function_call.name}\")\nprint(f\"Arguments: {function_call.args}\")\n</code></pre> <p>Execute the function with the arguments Gemini provided</p> <pre><code>result = get_current_temperature(**function_call.args)\nprint(f\"Function result: {result}\")\n</code></pre> <p>Send the function result back to Gemini for a final response</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\n        {\n            \"parts\": [\n                {\n                    \"function_response\": {\n                        \"name\": function_call.name,\n                        \"response\": result,\n                    }\n                }\n            ]\n        }\n    ],\n)\nprint(f\"Model's final response: {response.text}\")\n</code></pre> <p>Example 2 shows how to use multiple functions simultaneously.</p> <pre><code>print(\"\\n--- Example 2: Parallel Function Calling (Weather and Appointments) ---\\n\")\n</code></pre> <p>Define the weather function declaration</p> <pre><code>weather_function = {\n    \"name\": \"get_current_temperature\",\n    \"description\": \"Gets the current temperature for a given location.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city name, e.g. London\",\n            },\n        },\n        \"required\": [\"location\"],\n    },\n}\n</code></pre> <p>Define the appointment function declaration</p> <pre><code>appointment_function = {\n    \"name\": \"check_appointment_availability\",\n    \"description\": \"Checks if there's availability for an appointment at the given date and time.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"date\": {\n                \"type\": \"string\",\n                \"description\": \"Date to check (YYYY-MM-DD)\",\n            },\n            \"time\": {\n                \"type\": \"string\",\n                \"description\": \"Time to check (HH:MM) in 24-hour format\",\n            },\n        },\n        \"required\": [\"date\", \"time\"],\n    },\n}\n</code></pre> <p>Create a client and configure it with both function declarations</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\ntools = [types.Tool(function_declarations=[weather_function, appointment_function])]\n</code></pre> <p>Set a lower temperature for more predictable function calling</p> <pre><code>config = {\n    \"tools\": tools,\n    \"temperature\": 0.1,\n}\n</code></pre> <p>Start a chat and send a message that should trigger both functions</p> <pre><code>chat = client.chats.create(model=\"gemini-2.0-flash-lite\", config=config)\nresponse = chat.send_message(\n    \"I'm planning to visit Paris on July 4th at 2 PM. What's the weather like there and is that slot available for an appointment?\"\n)\n</code></pre> <p>Store the results from each function call</p> <pre><code>results = {}\n</code></pre> <p>Process each function call Gemini requests Assumes Gemini will always respond with function calls.</p> <pre><code>for fn in response.function_calls:\n    args_str = \", \".join(f\"{key}={val}\" for key, val in fn.args.items())\n    print(f\"{fn.name}({args_str})\")\n</code></pre> <p>Call the appropriate function based on name</p> <pre><code>if fn.name == \"get_current_temperature\":\n        result = get_current_temperature(**fn.args)\n    elif fn.name == \"check_appointment_availability\":\n        result = check_appointment_availability(**fn.args)\n    else:\n        result = {\"error\": f\"Unknown function: {fn.name}\"}\n</code></pre> <p>Store each result for later use</p> <pre><code>results[fn.name] = result\n    print(f\"Result: {result}\\n\")\n</code></pre> <p>Prepare all function responses to send back to Gemini</p> <pre><code>function_responses = []\nfor fn_name, result in results.items():\n    function_responses.append({\"name\": fn_name, \"response\": result})\n</code></pre> <p>Send all results back to Gemini in a single message</p> <pre><code>if function_responses:\n    print(\"Sending all function results back to the model...\\n\")\n    response = chat.send_message(str(function_responses))\n    print(f\"Model's final response:\\n{response.text}\")\n</code></pre>"},{"location":"agentic-behaviour/function-calling-tool-use/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library and requests</p> <pre><code>$ pip install google-genai requests\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python function_calling_weather_calendar.py\n--- Example 1: Basic Function Calling ---\nFunction to call: get_current_temperature\nArguments: {'location': 'London'}\nFunction result: {'location': 'London', 'temperature': 16, 'unit': 'Celsius'}\nModel's final response: OK. The current temperature in London is 16 degrees Celsius.\n--- Example 2: Parallel Function Calling (Weather and Appointments) ---\nget_current_temperature(location=Paris)\nResult: {'location': 'Paris', 'temperature': 18, 'unit': 'Celsius'}\ncheck_appointment_availability(time=14:00, date=2024-07-04)\nResult: {'available': False, 'message': 'The slot on 2024-07-04 at 14:00 is already booked.'}\nSending all function results back to the model...\nModel's final response:\nThe current temperature in Paris is 18 degrees Celsius. The appointment slot on July 4th at 2 PM is not available.\n</code></pre>"},{"location":"agentic-behaviour/function-calling-tool-use/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"agentic-behaviour/grounded-responses-with-search-tool/","title":"Grounded responses with search tool","text":"<p>This example demonstrates how to use the Gemini API with the Search tool to get grounded responses. This means that you can ask questions to the LLM which will incorporate live or dynamic search results into the response.</p> <p>Import the Gemini API and necessary tools</p> <pre><code>from google import genai\nfrom google.genai.types import Tool, GenerateContentConfig, GoogleSearch\nimport os\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Specify the model to use (Gemini 2.0 models or later support search as a tool)</p> <pre><code>model_id = \"gemini-2.0-flash\"\n</code></pre> <p>Configure the Google Search tool</p> <pre><code>google_search_tool = Tool(google_search=GoogleSearch())\n</code></pre> <p>Craft your query.  This one asks for films in Delft cinemas on a specific date.</p> <pre><code>query = \"What films are showing in Delft on April 5, 2025, particularly at Filmhuis Lumen and Pathe cinemas?\"\n</code></pre> <p>Call the API to generate content, including the search tool in the configuration</p> <pre><code>response = client.models.generate_content(\n    model=model_id,\n    contents=query,\n    config=GenerateContentConfig(\n        tools=[google_search_tool],\n        response_modalities=[\"TEXT\"],\n    ),\n)\n</code></pre> <p>Print the generated text response</p> <pre><code>for each in response.candidates[0].content.parts:\n    print(each.text)\n</code></pre> <p>(Optional) Print the grounding metadata (web content used to ground the response). You'll get a lot of HTML data and content when you print this.</p> <pre><code>print(response.candidates[0].grounding_metadata.search_entry_point.rendered_content)\n</code></pre>"},{"location":"agentic-behaviour/grounded-responses-with-search-tool/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python grounded_search.py\n[Example output - this will vary based on search results]\nOkay, here's what I've found regarding films playing in Delft on April 5, 2025:\n**Filmhuis Lumen:**\n*   **Vermiglio:** An Italian family chronicle about a large family in a mountain village during the last year of World War II.\n*   **Vingt Dieux:** A heartwarming film about an 18-year-old whose carefree life ends when his father suddenly dies.\n*   **En Fanfare:** A feel-good film about how music connects people and how unlikely family ties can lead to genuine friendships.\n*   **I'm Still Here** (Playing at 21:00)\n*   **De Propagandist** (Documentary)\n**Pathe Delft:**\nPlease note that film schedules are often updated weekly (typically on Mondays or Wednesdays), so the listings available right now might not be entirely accurate for April 5, 2025.\nBased on current information, these films *might* be playing at Path\u00e9 Delft on that date:\n*   A Minecraft Movie (Original version)\n*   A Minecraft Movie (Dutch version)\n*   A Working Man\n*   Disney Snow White (Original version)\n*   Mickey 17\n*   Novocaine\n*   Ne Zha 2\n*   Vaiana 2 (Dutch version)\nTo get the most accurate listings for Pathe Delft, I recommend checking their website ([https://www.pathe.nl/](https://www.pathe.nl/)) closer to the date, likely after Monday, March 31, 2025.\n&lt;style&gt;\n.container {\n  align-items: center;\n  border-radius: 8px;\n  display: flex;\n  font-family: Google Sans, Roboto, sans-serif;\n  font-size: 14px;\n  line-height: 20px;\n  padding: 8px 12px;\n}\n.chip {\n  display: inline-block;\n  border: solid 1px;\n  border-radius: 16px;\n  min-width: 14px;\netc...\n</code></pre>"},{"location":"agentic-behaviour/grounded-responses-with-search-tool/#images","title":"Images","text":"<p> - Responses</p>"},{"location":"agentic-behaviour/grounded-responses-with-search-tool/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"agentic-behaviour/model-context-protocol/","title":"Model Context Protocol","text":"<p>This example demonstrates using a local MCP server with Gemini to get weather information.</p> <p>Import necessary libraries. Make you have mcp installed.</p> <pre><code>import asyncio\nimport os\nfrom datetime import datetime\nfrom google import genai\nfrom google.genai import types\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n</code></pre> <p>Configure Gemini client</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define server parameters for the MCP server</p> <pre><code>server_params = StdioServerParameters(\n    command=\"npx\",  # Executable for the MCP server\n    args=[\n        \"-y\",\n        \"@philschmid/weather-mcp\",\n    ],  # Arguments for the server (Weather MCP Server)\n    env=None,  # Optional environment variables\n)\n</code></pre> <p>Define the prompt to get the weather for the current day in Delft</p> <pre><code>PROMPT = f\"What is the weather in Delft in {datetime.now().strftime('%Y-%m-%d')}?\"\n</code></pre> <p>Define an asynchronous function to run the MCP client and interact with Gemini. We retrieve tools from the MCP session and convert them to Gemini Tool objects</p> <pre><code>async def run():\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            mcp_tools = await session.list_tools()\n            tools = [\n                types.Tool(\n                    function_declarations=[\n                        {\n                            \"name\": tool.name,\n                            \"description\": tool.description,\n                            \"parameters\": {\n                                k: v\n                                for k, v in tool.inputSchema.items()\n                                if k not in [\"additionalProperties\", \"$schema\"]\n                            },\n                        }\n                    ]\n                )\n                for tool in mcp_tools.tools\n            ]\n\n            response = client.models.generate_content(\n                model=\"gemini-2.0-flash\",\n                contents=PROMPT,\n                config=types.GenerateContentConfig(\n                    temperature=0,\n                    tools=tools,\n                ),\n            )\n\n            if response.candidates[0].content.parts[0].function_call:\n                function_call = response.candidates[0].content.parts[0].function_call\n                print(f\"Function call: {function_call}\")\n\n                result = await session.call_tool(\n                    function_call.name, arguments=function_call.args\n                )\n                print(f\"Tool Result: {result.content[0].text}\")\n\n            else:\n                print(\"No function call found in the response.\")\n                print(response.text)\n</code></pre> <p>Run the asynchronous function</p> <pre><code>asyncio.run(run())\n</code></pre>"},{"location":"agentic-behaviour/model-context-protocol/#running-the-example","title":"Running the Example","text":"<p>First, install the necessary libraries</p> <pre><code>$ pip install google-genai mcp\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python mcp_example.py\nFunction call: id=None args={'date': '2025-04-05', 'location': 'Delft'} name='get_weather_forecast'\nTool Result: {\"2025-04-05T00:00\":11.4,\"2025-04-05T01:00\":10.3,\"2025-04-05T02:00\":9.8,\"2025-04-05T03:00\":9.1,\"2025-04-05T04:00\":8,\"2025-04-05T05:00\":8,\"2025-04-05T06:00\":8.3,\"2025-04-05T07:00\":9.1,\"2025-04-05T08:00\":11.1,\"2025-04-05T09:00\":12.8,\"2025-04-05T10:00\":14.3,\"2025-04-05T11:00\":15.6,\"2025-04-05T12:00\":16,\"2025-04-05T13:00\":16.4,\"2025-04-05T14:00\":17,\"2025-04-05T15:00\":16.6,\"2025-04-05T16:00\":16.1,\"2025-04-05T17:00\":15,\"2025-04-05T18:00\":13.5,\"2025-04-05T19:00\":11.9,\"2025-04-05T20:00\":11.1,\"2025-04-05T21:00\":10.7,\"2025-04-05T22:00\":10.1,\"2025-04-05T23:00\":9.3}\n</code></pre>"},{"location":"agentic-behaviour/model-context-protocol/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"audio/","title":"Audio","text":""},{"location":"audio/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>Audio question answering</p> </li> <li> <p>Audio transcription</p> </li> <li> <p>Audio summarization</p> </li> </ul>"},{"location":"audio/audio-question-answering/","title":"Audio question answering","text":"<p>This example demonstrates how to ask a question about the content of an audio file using the Gemini API.</p> <p>Import the necessary libraries</p> <pre><code>from google import genai\nfrom google.genai import types\nimport requests\nimport os\n</code></pre> <p>Replace with your actual API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define a descriptive User-Agent following Wikimedia's policy</p> <pre><code>user_agent = \"GeminiByExample/1.0 (https://github.com/strickvl/geminibyexample; contact@example.org) python-requests/2.0\"\n</code></pre> <p>Download the audio file from the URL</p> <pre><code>url = \"https://upload.wikimedia.org/wikipedia/commons/1/1f/%22DayBreak%22_with_Jay_Young_on_the_USA_Radio_Network.ogg\"\nheaders = {\"User-Agent\": user_agent}\nresponse = requests.get(url, headers=headers)\nresponse.raise_for_status()  # Raise an exception for bad status codes\n</code></pre> <p>Save the content to a variable Note: If your audio file is larger than 20MB, you should use the File API to upload the file first. The File API allows you to upload larger files and then reference them in your requests.</p> <pre><code>audio_bytes = response.content\n</code></pre> <p>You can now pass that audio file along with the prompt to Gemini</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\n        \"What is the main topic of this audio?\",\n        types.Part.from_bytes(\n            data=audio_bytes,\n            mime_type=\"audio/ogg\",\n        ),\n    ],\n)\n\nprint(response.text)\n</code></pre>"},{"location":"audio/audio-question-answering/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library and requests</p> <pre><code>$ pip install google-genai requests\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python audio-question.py\nThis audio features a male host and a travel expert, Pete Trabucco.\n</code></pre>"},{"location":"audio/audio-question-answering/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"audio/audio-summarization/","title":"Audio summarization","text":"<p>This example demonstrates how to summarize the content of an audio file using the Gemini API.</p> <p>Import the necessary libraries</p> <pre><code>from google import genai\nfrom google.genai import types\nimport requests\nimport os\n</code></pre> <p>Replace with your actual API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define a descriptive User-Agent following Wikimedia's policy</p> <pre><code>user_agent = \"GeminiByExample/1.0 (https://github.com/strickvl/geminibyexample; contact@example.org) python-requests/2.0\"\n</code></pre> <p>Download the audio file from the URL</p> <pre><code>url = \"https://upload.wikimedia.org/wikipedia/commons/1/1f/%22DayBreak%22_with_Jay_Young_on_the_USA_Radio_Network.ogg\"\nheaders = {\"User-Agent\": user_agent}\nresponse = requests.get(url, headers=headers)\nresponse.raise_for_status()  # Raise an exception for bad status codes\n</code></pre> <p>Save the content to a variable Note: If your audio file is larger than 20MB, you should use the File API to upload the file first. The File API allows you to upload larger files and then reference them in your requests.</p> <pre><code>audio_bytes = response.content\n</code></pre> <p>You can now pass that audio file along with the prompt to Gemini</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\n        \"What is this audio about?\",\n        types.Part.from_bytes(\n            data=audio_bytes,\n            mime_type=\"audio/ogg\",\n        ),\n    ],\n)\n\nprint(response.text)\n</code></pre>"},{"location":"audio/audio-summarization/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library and requests</p> <pre><code>$ pip install google-genai requests\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python audio-summarization.py\nThis audio is about travel tips, particularly what to do in the event of a disaster while on vacation.\nThe speaker emphasizes the importance of staying informed about the destination, traveling with a buddy,\nhaving a plan in place, and investing in travel insurance. They also mention the importance of connecting\nwith home base and knowing the location of the American Red Cross in case of emergencies.\n</code></pre>"},{"location":"audio/audio-summarization/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"audio/audio-transcription/","title":"Audio transcription","text":"<p>This example demonstrates how to transcribe an audio file by providing the audio data inline with the request.</p> <p>Import the necessary modules</p> <pre><code>from google import genai\nfrom google.genai import types\nimport requests\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n</code></pre> <p>Define a descriptive User-Agent following Wikimedia's policy</p> <pre><code>user_agent = \"GeminiByExample/1.0 (https://github.com/strickvl/geminibyexample; contact@example.org) python-requests/2.0\"\n</code></pre> <p>Download the audio file from the URL</p> <pre><code>url = \"https://upload.wikimedia.org/wikipedia/commons/1/1f/%22DayBreak%22_with_Jay_Young_on_the_USA_Radio_Network.ogg\"\nheaders = {\"User-Agent\": user_agent}\nresponse = requests.get(url, headers=headers)\nresponse.raise_for_status()  # Raise an exception for bad status codes\n</code></pre> <p>Read the audio file as bytes Note: If your audio file is larger than 20MB, you should use the File API to upload the file first. The File API allows you to upload larger files and then reference them in your requests.</p> <pre><code>audio_bytes = response.content\n</code></pre> <p>Call the API to generate a transcription of the audio clip</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\n        \"Transcribe this audio clip\",\n        types.Part.from_bytes(\n            data=audio_bytes,\n            mime_type=\"audio/ogg\",\n        ),\n    ],\n)\n</code></pre> <p>Print the transcribed text</p> <pre><code>print(response.text)\n</code></pre>"},{"location":"audio/audio-transcription/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python audio-transcription.py\nWe're joined once again by our travel expert and also author of America's Top Roller Coasters and Amusement Parks, Pete Trabucco. Good morning and welcome back to Daybreak USA. Well, thanks for having me on. If someone's lucky enough to go on vacation to an exotic location, and then maybe not so lucky to have some kind of a disaster happen while they're there, maybe some civil unrest. What should they do now? What's the next step? Well, whenever you're going on vacation whether it's locally or internationally, you've got to be uh very careful.\n</code></pre>"},{"location":"audio/audio-transcription/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"images/","title":"Images","text":""},{"location":"images/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>Image question answering</p> </li> <li> <p>Image generation (Gemini and Imagen)</p> </li> <li> <p>Edit an image</p> </li> <li> <p>Bounding boxes</p> </li> <li> <p>Image segmentation</p> </li> </ul>"},{"location":"images/bounding-boxes/","title":"Bounding boxes","text":"<p>This example demonstrates how to use the Gemini API to detect an object (a cat) in an image and retrieve its bounding box coordinates.</p> <p>Import necessary libraries. Make sure Pillow is installed!</p> <pre><code>from google import genai\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n</code></pre> <p>Specify the prompt, asking for a bounding box around the cat</p> <pre><code>prompt = (\n    \"Return a bounding box for the cat in this image \"\n    \"in [ymin, xmin, ymax, xmax] format.\"\n)\n</code></pre> <p>Download the cat image from cataas.com</p> <pre><code>image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n</code></pre> <p>Call the Gemini API to generate content with the image and prompt</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-1.5-pro\", contents=[cat_image, prompt]\n)\n</code></pre> <p>Print the response text, which will contain the bounding box coordinates</p> <pre><code>print(response.text)\n</code></pre> <p>Normalize Coordinates The model returns bounding box coordinates in the format [y_min, x_min, y_max, x_max]. To convert these normalized coordinates to the pixel coordinates of your original image, follow these steps: 1. Divide each output coordinate by 1000. 2. Multiply the x-coordinates by the original image width. 3. Multiply the y-coordinates by the original image height.</p> <p>Example Calculation (assuming the model returns [200, 300, 700, 800] and the image is 1000x800):</p> <pre><code>y_min = (200 / 1000) * 800  # 160\nx_min = (300 / 1000) * 1000  # 300\ny_max = (700 / 1000) * 800  # 560\nx_max = (800 / 1000) * 1000  # 800\n</code></pre>"},{"location":"images/bounding-boxes/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library, requests, and Pillow</p> <pre><code>$ pip install google-genai Pillow requests\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python object-detection.py\n[0.1, 0.2, 0.7, 0.8]\n</code></pre>"},{"location":"images/bounding-boxes/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"images/edit-an-image/","title":"Edit an image","text":"<p>This example demonstrates how to edit an existing image of a cat to add a hat using the Gemini API.</p> <p>Import necessary libraries. Make sure Pillow is installed!</p> <pre><code>from google import genai\nfrom google.genai import types\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\nimport os\n</code></pre> <p>Set your Gemini API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Download the cat image from cataas.com</p> <pre><code>image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n</code></pre> <p>Prepare a prompt.</p> <pre><code>text_prompt = \"Please add a stylish top hat to this cat.\"\n</code></pre> <p>Generate content with the Gemini API</p> <pre><code>model = \"gemini-2.0-flash-exp-image-generation\"\nresponse = client.models.generate_content(\n    model=model,\n    contents=[text_prompt, cat_image],\n    config=types.GenerateContentConfig(response_modalities=[\"Text\", \"Image\"]),\n)\n</code></pre> <p>Process the response. Retry if you get a 500 error.</p> <pre><code>for part in response.candidates[0].content.parts:\n    if part.text is not None:\n        print(part.text)\n    elif part.inline_data is not None:\n        print(f\"Received {part.inline_data.mime_type} data\")\n</code></pre> <p>The data is provided as raw bytes, not base64-encoded</p> <pre><code>image = Image.open(BytesIO(part.inline_data.data))\n        image.save(\"cat_with_hat.png\")\n        print(\"\\nImage saved as cat_with_hat.png\")\n</code></pre>"},{"location":"images/edit-an-image/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai Pillow requests\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python edit_cat.py\nImage saved as cat_with_hat.png\n</code></pre>"},{"location":"images/edit-an-image/#images","title":"Images","text":"<p> - cat_with_hat</p>"},{"location":"images/edit-an-image/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"images/image-generation-gemini-and-imagen/","title":"Image generation (Gemini and Imagen)","text":"<p>This example demonstrates generating images using both Gemini 2.0 Flash and Imagen 3 models, focusing on cat-related prompts.</p> <p>Import necessary libraries. Make sure Pillow is installed!</p> <pre><code>from google import genai\nfrom google.genai import types\nfrom PIL import Image\nfrom io import BytesIO\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n</code></pre> <p>We start by using Gemini 2.0 Flash for image generation. Demonstrates generating an image and associated text using Gemini 2.0 Flash.</p> <pre><code>contents = (\n    \"Hi, can you create a 3D rendered image of a cat wearing a wizard hat, \"\n    \"casting a spell in a magical forest?\"\n)\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash-exp-image-generation\",\n    contents=contents,\n    config=types.GenerateContentConfig(response_modalities=[\"Text\", \"Image\"]),\n)\n</code></pre> <p>Save the image to a file and display it</p> <pre><code>for part in response.candidates[0].content.parts:\n    if part.text is not None:\n        print(part.text)\n    elif part.inline_data is not None:\n        image = Image.open(BytesIO(part.inline_data.data))\n        image.save(\"gemini-cat-wizard.png\")\n        image.show()\n</code></pre> <p>Now we use Imagen 3 for image generation. Demonstrates generating multiple high-quality images of cats using Imagen 3. Imagen 3 is only available on the Paid Tier and always includes a SynthID watermark.</p> <pre><code>response = client.models.generate_images(\n    model=\"imagen-3.0-generate-002\",\n    prompt=\"A photorealistic image of a cat astronaut floating in space\",\n    config=types.GenerateImagesConfig(number_of_images=2),\n)\n</code></pre> <p>Save the images to files and display them</p> <pre><code>for i, generated_image in enumerate(response.generated_images):\n    image = Image.open(BytesIO(generated_image.image.image_bytes))\n    image.save(f\"imagen-cat-astronaut-{i+1}.png\")\n    image.show()\n</code></pre>"},{"location":"images/image-generation-gemini-and-imagen/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai Pillow\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python image-generation.py\n# Expected output (will vary based on the model):\n# (Text describing the cat wizard image from Gemini 2.0 Flash)\n# (Two image windows will open, displaying the generated cat astronaut images from Imagen 3)\n# Image saved as gemini-cat-wizard.png\n# (Two image windows will open, displaying the generated cat astronaut images from Imagen 3)\n</code></pre>"},{"location":"images/image-generation-gemini-and-imagen/#images","title":"Images","text":"<p> - Wizard</p>"},{"location":"images/image-generation-gemini-and-imagen/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"images/image-question-answering/","title":"Image question answering","text":"<p>This example demonstrates how to use the Gemini API to analyze or understand images of cats, including using image URLs and base64 encoding.</p> <p>Import necessary libraries</p> <pre><code>from google import genai\nfrom google.genai import types\nimport requests\nimport base64\n</code></pre> <p>Replace with your Gemini API key</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n</code></pre> <p>We'll start by using an image URL. Load an image of a cat from a URL</p> <pre><code>image_url = \"https://cataas.com/cat\"\nimage_response = requests.get(image_url)\nimage_content = image_response.content\n</code></pre> <p>Ask Gemini about the cat in the image</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\"What breed of cat is this?\", types.Part.from_bytes(data=image_content, mime_type=\"image/jpeg\")]\n)\n\nprint(\"Response from URL Image:\\n\", response.text)\n</code></pre> <p>Now we'll use a local image file. Load a local image of a cat and encode it as Base64</p> <pre><code>with open(\"cat.jpg\", \"rb\") as image_file:\n    encoded_string = base64.b64encode(image_file.read())\n</code></pre> <p>Ensure the encoded string is a string</p> <pre><code>encoded_string = encoded_string.decode('utf-8')\n</code></pre> <p>Ask Gemini a question about the cat, providing the image as a Base64 string</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\"Is this cat fluffy?\", types.Part.from_bytes(data=base64.b64decode(encoded_string), mime_type=\"image/jpeg\")]\n)\n\nprint(\"\\nResponse from Base64 Image:\\n\", response.text)\n</code></pre>"},{"location":"images/image-question-answering/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library and requests</p> <pre><code>$ pip install google-genai requests\n</code></pre> <p>Download an example cat image (replace with your own if needed)</p> <pre><code>$ wget https://cataas.com/cat -O cat.jpg\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python gemini-cat.py\nResponse from URL Image:\n This looks like a British Shorthair cat.\nResponse from Base64 Image:\n Yes, this cat appears to be fluffy.\n</code></pre>"},{"location":"images/image-question-answering/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"images/image-segmentation/","title":"Image segmentation","text":"<p>This example demonstrates how to use the Gemini API to perform image segmentation on a picture of a cat.</p> <p>Import the Gemini API and necessary libraries. Make sure Pillow is installed!</p> <pre><code>from google import genai\nimport os\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nimport json\nimport base64\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define the prompt for image segmentation, focusing on cats</p> <pre><code>prompt = \"\"\"\nGive the segmentation masks for the cat in the image.\nOutput a JSON list of segmentation masks where each entry contains the 2D\nbounding box in the key \\\"box_2d\\\", the segmentation mask in key \\\"mask\\\", and\nthe text label in the key \\\"label\\\". Use descriptive labels.\n\"\"\"\n</code></pre> <p>Download the cat image from cataas.com</p> <pre><code>image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n</code></pre> <p>Save the original image</p> <pre><code>original_filename = f\"cat_original.png\"\ncat_image.save(original_filename)\nprint(f\"Original image saved as: {original_filename}\")\n</code></pre> <p>Call the Gemini API to generate content with the image and prompt</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.5-pro-exp-03-25\", contents=[cat_image, prompt]\n)\n</code></pre> <p>Print the response containing segmentation information.</p> <pre><code>print(response.text)\n</code></pre> <p>Display and save the overlaid mask. Extract the JSON part from the response (it might be wrapped in markdown)</p> <pre><code>response_text = response.text\nif \"```json\" in response_text:\n    json_str = response_text.split(\"```json\")[1].split(\"```\")[0].strip()\nelif \"[\" in response_text and \"]\" in response_text:\n    start = response_text.find(\"[\")\n    end = response_text.rfind(\"]\") + 1\n    json_str = response_text[start:end]\nelse:\n    json_str = response_text\n</code></pre> <p>Parse JSON data</p> <pre><code>mask_data = json.loads(json_str)\n</code></pre> <p>Get the first mask. This assumes a mask was returned.</p> <pre><code>first_mask = mask_data[0]\n</code></pre> <p>Extract base64 encoded mask</p> <pre><code>mask_base64 = first_mask.get(\"mask\", \"\")\nif \"base64,\" in mask_base64:\n    mask_base64 = mask_base64.split(\"base64,\")[1]\n</code></pre> <p>Decode and load the mask image</p> <pre><code>mask_bytes = base64.b64decode(mask_base64)\nmask_image = Image.open(BytesIO(mask_bytes))\n</code></pre> <p>Convert images to RGBA</p> <pre><code>cat_image = cat_image.convert(\"RGBA\")\nmask_image = mask_image.convert(\"L\")  # Convert mask to grayscale\n</code></pre> <p>Create a bright colored overlay (bright pink)</p> <pre><code>overlay = Image.new(\n    \"RGBA\", mask_image.size, (255, 0, 255, 128)\n)  # Bright pink, semi-transparent\n</code></pre> <p>Use the mask to determine where to apply the color. We need the mask as an alpha channel</p> <pre><code>overlay.putalpha(mask_image)\n</code></pre> <p>Resize the overlay to match the original image if needed</p> <pre><code>if overlay.size != cat_image.size:\n    overlay = overlay.resize(cat_image.size)\n</code></pre> <p>Overlay the colored mask on the original image. Save both images.</p> <pre><code>result = Image.alpha_composite(cat_image, overlay)\n\nmask_filename = f\"cat_mask.png\"\nmask_image.save(mask_filename)\n\nmerged_filename = f\"cat_with_mask.png\"\nresult.save(merged_filename)\n</code></pre>"},{"location":"images/image-segmentation/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python cat_segmentation.py\n# Expected output (example):\n# [{\"box_2d\": [100, 50, 900, 750], \"mask\": \"base64_encoded_png_data\", \"label\": \"Main Coon Cat\"}, ...]\n</code></pre>"},{"location":"images/image-segmentation/#images","title":"Images","text":"<p> - Segmentation</p>"},{"location":"images/image-segmentation/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"miscellaneous/","title":"Miscellaneous","text":""},{"location":"miscellaneous/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>Rate limits and retries</p> </li> <li> <p>Concurrent requests and generation</p> </li> <li> <p>Embeddings generation</p> </li> <li> <p>Safety settings and filters</p> </li> <li> <p>LiteLLM</p> </li> </ul>"},{"location":"miscellaneous/concurrent-requests-and-generation/","title":"Concurrent requests and generation","text":"<p>This example demonstrates how to generate text using concurrent.futures to make parallel requests to the Gemini API, with a focus on cat-related prompts.</p> <p>Import the necessary libraries</p> <pre><code>import concurrent.futures\nfrom google import genai\nimport os\n\n\nclient = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>A function to generate a fun fact about cats.</p> <pre><code>def generate_cat_fact(model):\n</code></pre> <p>Generates a fun fact about cats.</p> <pre><code>response = client.models.generate_content(\n        model=model,\n        contents=\"Tell me a fun fact about cats.\",\n    )\n    return response.text\n</code></pre> <p>A function to generate a short story about a cat.</p> <pre><code>def generate_cat_story(model):\n</code></pre> <p>Generates a short story about a cat.</p> <pre><code>response = client.models.generate_content(\n        model=model,\n        contents=\"Write a ultra-short story about a cat who goes on an adventure.\",\n    )\n    return response.text\n</code></pre> <p>The model to use for the requests.</p> <pre><code>model = \"gemini-2.0-flash-lite\"\n</code></pre> <p>Use ThreadPoolExecutor to run the requests concurrently. We submit the tasks to the executor and then get the results.</p> <pre><code>with concurrent.futures.ThreadPoolExecutor() as executor:\n    fact_future = executor.submit(generate_cat_fact, model)\n    story_future = executor.submit(generate_cat_story, model)\n\n    cat_fact = fact_future.result()\n    cat_story = story_future.result()\n\nprint(\"Cat Fact:\\n\", cat_fact)\nprint(\"\\nCat Story:\\n\", cat_story)\n</code></pre>"},{"location":"miscellaneous/concurrent-requests-and-generation/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then, run the async program with Python</p> <pre><code>$ python async_cat_generation.py\nCat Fact:\n Cats can jump up to six times their height!\n</code></pre>"},{"location":"miscellaneous/concurrent-requests-and-generation/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"miscellaneous/embeddings-generation/","title":"Embeddings generation","text":"<p>This example demonstrates generating text embeddings for cat-related terms using the Gemini API.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nimport os\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Specify the embedding model to use</p> <pre><code>model_name = \"gemini-embedding-exp-03-07\"\n</code></pre> <p>Define some cat-related terms</p> <pre><code>cats = [\"Siamese cat\", \"Persian cat\", \"cat food\", \"cat nap\"]\n</code></pre> <p>Generate embeddings for each term</p> <pre><code>embeddings = []\nfor cat in cats:\n    result = client.models.embed_content(model=model_name, contents=cat)\n    embeddings.append(result.embeddings)\n</code></pre> <p>Print the embeddings (for demonstration purposes, showing the length)</p> <pre><code>for i, embedding in enumerate(embeddings):\n    embedding_values = embedding[0].values\n    print(f\"Embedding for '{cats[i]}': Length = {len(embedding_values)}\")\n    print(f\"First 10 values: {embedding_values[0:10]}\")\n</code></pre>"},{"location":"miscellaneous/embeddings-generation/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-generative-ai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python embeddings_example.py\nEmbedding for 'Siamese cat': Length = 3072\nFirst 10 values: [-0.04499451, -0.0024065399, 0.00653481, -0.079863556, -0.03341567, 0.016723568, 0.010078963, -0.012704449, -0.012259528, -0.0072885454]\nEmbedding for 'Persian cat': Length = 3072\nFirst 10 values: [-0.043987285, 0.033221565, 0.0016907051, -0.056972563, 0.006436907, -0.0006723535, -0.0009717501, 0.033097122, -6.910255e-05, -0.017573195]\nEmbedding for 'cat food': Length = 3072\nFirst 10 values: [-0.025519634, 0.013711145, 0.045626495, -0.055266093, 0.002371603, 0.01668532, -0.022395907, 0.0109309815, 0.026964031, 0.027647937]\nEmbedding for 'cat nap': Length = 3072\nFirst 10 values: [-0.024834476, 0.009304642, -0.003533542, -0.08721581, -0.0068027894, 0.003322256, 0.01155771, 0.027575387, 0.012308658, -0.013031868]\n</code></pre>"},{"location":"miscellaneous/embeddings-generation/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"miscellaneous/litellm/","title":"LiteLLM","text":"<p>This example demonstrates how to use the LiteLLM library to make calls to the Gemini API. It shows a simple text generation call and then shows structured output using a Pydantic model.</p> <p>Import the necessary libraries. Make sure that LiteLLM and Pydantic are installed.</p> <pre><code>from litellm import completion\nfrom pydantic import BaseModel\nimport json\n</code></pre> <p>With this first example, we'll make a simple text generation call.</p> <pre><code>response = completion(\n    model=\"gemini/gemini-2.0-flash-lite\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello what is your name?\"}],\n)\nprint(response.choices[0].message.content)\n</code></pre> <p>Now let's define a slightly more involved example that defines a Pydantic model and uses it to specify the response format.</p> <pre><code>class Response(BaseModel):\n    response: str\n    good_response: bool\n</code></pre> <p>We'll use the same prompt as before, but this time we'll specify that the response should be a JSON object that matches the Response model.</p> <pre><code>response = completion(\n    model=\"gemini/gemini-2.0-flash-lite\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello what is your name?\"}],\n    response_format={\n        \"type\": \"json_object\",\n        \"response_schema\": Response.model_json_schema(),\n    },\n)\n</code></pre> <p>The response is a JSON object that matches the Response model.</p> <pre><code>print(json.loads(response.choices[0].message.content))\n</code></pre>"},{"location":"miscellaneous/litellm/#running-the-example","title":"Running the Example","text":"<p>First, install the LiteLLM and Pydantic libraries</p> <pre><code>$ pip install litellm pydantic\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python litellm.py\nI am a large language model, trained by Google. I don't have a name in the traditional sense. You can just call me by what I am!\n{'good_response': False, 'response': \"I am a large language model, I don't have a name.\"}\n</code></pre>"},{"location":"miscellaneous/litellm/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"miscellaneous/rate-limits-and-retries/","title":"Rate limits and retries","text":"<p>This example demonstrates generating text with the Gemini API, handling rate limiting errors, and using exponential backoff for retries.</p> <pre><code>import google.generativeai as genai\nimport google.ai.generativelanguage as glm\nimport time\nimport os\n</code></pre> <p>Configure the retry strategy</p> <pre><code>def configure_retries(base_delay=1, max_delay=60, max_retries=5):\n    \"\"\"Configures exponential backoff retry strategy.\"\"\"\n    return genai.retry.RetryConfig(\n        initial_delay=base_delay,\n        max_delay=max_delay,\n        max_retries=max_retries,\n        retry_on_status_codes=[glm.Code.RESOURCE_EXHAUSTED.value],\n    )\n</code></pre> <p>Set the retry configuration</p> <pre><code>retry_config = configure_retries()\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(\n    api_key=os.environ.get(\"GEMINI_API_KEY\", \"YOUR_API_KEY\"), retry_config=retry_config\n)\n</code></pre> <p>Select the model</p> <pre><code>model = \"gemini-2.0-flash\"\n</code></pre> <p>Construct the prompt</p> <pre><code>prompt = \"Tell me a funny story about a cat trying to catch a laser pointer.\"\n</code></pre> <p>Attempt text generation with retry logic</p> <pre><code>try:\n    response = client.models.generate_content(model=model, contents=prompt)\n    print(response.text)\nexcept genai.errors.APIError as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"miscellaneous/rate-limits-and-retries/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai backoff\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python text_generation_with_retry.py\nBartholomew Buttersworth the Third, a cat of considerable fluff and even more considerable ego, considered himself a master predator. His domain, the living room, was usually ruled with a sleepy, regal disdain.\nUntil the Red Dot appeared.\nIt materialized silently on the beige carpet, an insolent crimson speck challenging his authority. Bartholomew's eyes, previously half-closed slits of judgment, snapped wide open. His tail gave an involuntary *thwack* against the armchair.\n*Prey.*\nHe crouched low, hindquarters wiggling with suppressed energy, a furry missile preparing for launch. The dot danced teasingly towards the sofa leg. Bartholomew *pounced!*\nHe landed with an ungraceful *floof* exactly where the dot *had* been. It was now, infuriatingly, halfway up the wall.\nBartholomew stared, blinked, and launched himself vertically. His claws scrabbled momentarily against the paint before gravity asserted its dominance. He slid down the wall with a soft *scritch-scratch-thump*.\nThe dot, utterly unimpressed, zipped across the ceiling. Bartholomew tracked it, head tilting back so far he nearly somersaulted. He tried a running leap off the coffee table, misjudged the trajectory entirely, and ended up skidding under the armchair, emerging moments later covered in dust bunnies and indignation.\nThe dot, meanwhile, had settled innocently on his own fluffy white paw.\nBartholomew froze. Victory? He stared at the dot. The dot stared back (metaphorically speaking). Slowly, cautiously, he brought his nose down to sniff the intruder...\n*Click.*\nThe dot vanished.\nBartholomew looked at his paw. He looked around the room, eyes wide with betrayal. Where did it go? Was it *inside* his paw? He bit his paw gently, then shook his head, utterly bewildered.\nFinally, defeated and slightly dizzy, Bartholomew stalked over to his food bowl, pretending the entire embarrassing episode had never happened. The Red Dot, however, remained an unsolved mystery, a tiny, mocking ghost in his otherwise perfect predatory world.\n</code></pre>"},{"location":"miscellaneous/rate-limits-and-retries/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> <li> <p>Gemini docs link 3</p> </li> </ul>"},{"location":"miscellaneous/safety-settings-and-filters/","title":"Safety settings and filters","text":"<p>This example demonstrates how to adjust safety settings to block content based on the probability of unsafe content.</p> <p>Import the Gemini API and required types</p> <pre><code>from google import genai\nfrom google.genai import types\nimport os\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define safety settings to block low and above probability for harassment and hate speech. There are other categories like HARM_CATEGORY_HARASSMENT, HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT, and HARM_CATEGORY_CIVIC_INTEGRITY (relating to elections). These categories are defined in HarmCategory. The Gemini models only support these specific harm categories.</p> <pre><code>safety_settings = [\n    {\n        \"category\": types.HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n        \"threshold\": types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n    },\n    {\n        \"category\": types.HarmCategory.HARM_CATEGORY_HARASSMENT,\n        \"threshold\": types.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,\n    },\n]\n</code></pre> <p>Configure the generation with the defined safety settings</p> <pre><code>generation_config = types.GenerateContentConfig(safety_settings=safety_settings)\n</code></pre> <p>Generate content with the specified safety settings</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash-lite\",\n    contents=\"Write something that could be interpreted as offensive.\",\n    config=generation_config,\n)\n</code></pre> <p>Print the generated text (if not blocked by safety settings). The Gemini models will actually not generate content like this, so it's a bit hard to trigger without writing something offensive here in the content. I hope you get the idea, though, about how to use this.</p> <pre><code>if (\n    hasattr(response, \"prompt_feedback\")\n    and response.prompt_feedback\n    and hasattr(response.prompt_feedback, \"block_reason\")\n):\n    print(\"The prompt was blocked due to: \", response.prompt_feedback.block_reason)\nelse:\n    print(response.text)\n</code></pre>"},{"location":"miscellaneous/safety-settings-and-filters/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-generative-ai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python safety-settings.py\nI am programmed to be a harmless AI assistant. I am unable to provide responses that are offensive or discriminatory.\n</code></pre>"},{"location":"miscellaneous/safety-settings-and-filters/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"pdfs-and-other-data-types/","title":"PDFs and other data types","text":""},{"location":"pdfs-and-other-data-types/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>PDF and CSV data analysis and summarization</p> </li> <li> <p>Translate documents</p> </li> <li> <p>Extract structured data from a PDF</p> </li> </ul>"},{"location":"pdfs-and-other-data-types/extract-structured-data-from-a-pdf/","title":"Extract structured data from a PDF","text":"<p>This example demonstrates how to extract structured data from a PDF invoice using the Gemini API and Pydantic.</p> <p>Import necessary libraries. You'll need Pydantic for this one.</p> <pre><code>import os\nimport requests\nimport json\nimport re\nfrom pydantic import BaseModel, Field\nfrom typing import List, Union\nfrom google import genai\nfrom google.genai import types\n</code></pre> <p>Define Pydantic models for structured data</p> <pre><code>class Item(BaseModel):\n    name: str\n    price_per_kg: Union[float, str] = Field(..., alias=\"price/kg\")\n    quantity_kg: Union[float, int] = Field(..., alias=\"quantity (kg)\")\n\n\nclass InvoiceContents(BaseModel):\n    sender: str\n    recipient: str\n    address: str\n    full_total: Union[float, str]\n    subtotal: Union[float, str]\n    gst_value: Union[float, str] = Field(..., alias=\"GST\")\n    items: List[Item]\n</code></pre> <p>Load the PDF invoice inline from a URL. For PDFs larger than 20MB, you'll need to use the Files API for uploading</p> <pre><code>pdf_url = \"https://www.princexml.com/samples/invoice/invoicesample.pdf\"\nresponse = requests.get(pdf_url)\nresponse.raise_for_status()  # Ensure the download was successful\npdf_data = response.content\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.environ.get(\"GEMINI_API_KEY\", \"YOUR_API_KEY\"))\n</code></pre> <p>Configure the model for structured output. Specify the prompt text.</p> <pre><code>model = \"gemini-2.5-pro-preview-03-25\"\nprompt_text = (\n    \"Extract the following information from the invoice: \"\n    \"sender, recipient, address, full_total, subtotal, GST, \"\n    \"and a list of items (name, price/kg, quantity (kg)).\"\n)\n</code></pre> <p>Call the Gemini API to extract structured data from the PDF</p> <pre><code>response = client.models.generate_content(\n    model=model,\n    contents=[\n        types.Part.from_bytes(data=pdf_data, mime_type=\"application/pdf\"),\n        prompt_text,\n    ],\n    config=genai.types.GenerateContentConfig(temperature=0.0),\n)\n</code></pre> <p>Extract JSON from response text which might be formatted as a markdown code block. Check if the response is a markdown code block and extract the JSON content.</p> <pre><code>response_text = response.text\njson_match = re.search(r\"```(?:json)?\\n(.*?)```\", response_text, re.DOTALL)\nif json_match:\n    json_str = json_match.group(1).strip()\nelse:\n    json_str = response_text.strip()\n</code></pre> <p>Parse the JSON response into the Pydantic model</p> <pre><code>invoice_data = json.loads(json_str)\ninvoice = InvoiceContents(**invoice_data)\n</code></pre> <p>Print the extracted data as a JSON string</p> <pre><code>print(invoice.model_dump_json(indent=2))\n</code></pre>"},{"location":"pdfs-and-other-data-types/extract-structured-data-from-a-pdf/#running-the-example","title":"Running the Example","text":"<p>Install the Google Generative AI library and Pydantic</p> <pre><code>$ pip install google-genai pydantic requests\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python structured-data-extraction.py\n{\n  \"sender\": \"SUNNY FARM\",\n  \"recipient\": \"Denny Gunawan\",\n  \"address\": \"221 Queen St\\nMelbourne VIC 3000\",\n  \"full_total\": \"$39.60\",\n  \"subtotal\": \"$36.00\",\n  \"gst_value\": \"$3.60\",\n  \"items\": [\n    {\n      \"name\": \"Apple\",\n      \"price_per_kg\": \"$5.00\",\n      \"quantity_kg\": 1\n    },\n    {\n      \"name\": \"Orange\",\n      \"price_per_kg\": \"$1.99\",\n      \"quantity_kg\": 2\n    },\n    {\n      \"name\": \"Watermelon\",\n      \"price_per_kg\": \"$1.69\",\n      \"quantity_kg\": 3\n    },\n    {\n      \"name\": \"Mango\",\n      \"price_per_kg\": \"$9.56\",\n      \"quantity_kg\": 2\n    },\n    {\n      \"name\": \"Peach\",\n      \"price_per_kg\": \"$2.99\",\n      \"quantity_kg\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"pdfs-and-other-data-types/extract-structured-data-from-a-pdf/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"pdfs-and-other-data-types/pdf-and-csv-data-analysis-and-summarization/","title":"PDF and CSV data analysis and summarization","text":"<p>This example demonstrates how to use the Gemini API to analyze data from PDF and CSV files.</p> <p>Import necessary libraries</p> <pre><code>from google import genai\nfrom google.genai import types\nimport httpx\nimport os\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>We start with the PDF analysis. Download the PDF file</p> <pre><code>pdf_url = \"https://www.princexml.com/samples/invoice/invoicesample.pdf\"\npdf_data = httpx.get(pdf_url).content\n</code></pre> <p>Prompt to extract main players from the PDF</p> <pre><code>pdf_prompt = (\n    \"Identify the main companies or entities mentioned in this invoice. \"\n    \"Summarize the data.\"\n)\n</code></pre> <p>Generate content with the PDF and the prompt</p> <pre><code>pdf_response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\n        types.Part.from_bytes(data=pdf_data, mime_type=\"application/pdf\"),\n        pdf_prompt,\n    ],\n)\n</code></pre> <p>Print the PDF analysis result</p> <pre><code>print(\"PDF Analysis Result:\\n\", pdf_response.text)\n</code></pre> <p>Moving on to the CSV analysis now. You'll note that the process is very similar. You can also pass in code files, XML, RTF, Markdown, and more. We download the CSV file here.</p> <pre><code>csv_url = \"https://gist.githubusercontent.com/suellenstringer-hye/f2231b3383538bcb1a5b051c7908f5b7/raw/0f4e0733a434733cda8e749bbbf33a93c2b5bbde/test.csv\"\ncsv_data = httpx.get(csv_url).content\n</code></pre> <p>Prompt to analyze the CSV data</p> <pre><code>csv_prompt = \"Analyze this data and tell me about the contents. Summarize the data.\"\n</code></pre> <p>Generate content with the CSV data and the prompt</p> <pre><code>csv_response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\n        types.Part.from_bytes(\n            data=csv_data,\n            mime_type=\"text/csv\",\n        ),\n        csv_prompt,\n    ],\n)\n</code></pre> <p>Print the CSV analysis result</p> <pre><code>print(\"\\nCSV Analysis Result:\\n\", csv_response.text)\n</code></pre>"},{"location":"pdfs-and-other-data-types/pdf-and-csv-data-analysis-and-summarization/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library and httpx (for downloading files)</p> <pre><code>$ pip install google-genai httpx pandas\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python pdf_csv_analysis.py\nPDF Analysis Result:\n The main company mentioned in the invoice is Sunny Farm.\nCSV Analysis Result:\n Okay, I've analyzed the provided data. Here's a summary of its contents:\n**Data Format:**\n*   The data appears to be in CSV (Comma Separated Values) format.\n*   The first line is a header row defining the fields.\n*   Each subsequent line represents a record containing information about a person.\n**Fields Present:**\nThe data includes the following fields for each person:\n1.  **first\\_name:** The person's first name.\n2.  **last\\_name:** The person's last name.\n3.  **company\\_name:** The name of the company they are associated with.\n4.  **address:** The street address.\n5.  **city:** The city.\n6.  **county:** The county.\n7.  **state:** The state.\n8.  **zip:** The zip code.\n9.  **phone1:** The primary phone number.\n10. **phone2:** A secondary phone number.\n11. **email:** The email address.\n12. **web:** The website address (presumably for the associated company).\n</code></pre>"},{"location":"pdfs-and-other-data-types/pdf-and-csv-data-analysis-and-summarization/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"pdfs-and-other-data-types/translate-documents/","title":"Translate documents","text":"<p>This example demonstrates how to load content from a URL and translate it into Chinese using the Gemini API. It's easy to do the same using PDF or Markdown files, though you might want to split it up into smaller chunks for better accuracy if your document is long.</p> <p>Import the necessary libraries</p> <pre><code>from google import genai\nimport requests\nimport os\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define the URL of the content to be translated</p> <pre><code>url = \"https://raw.githubusercontent.com/zenml-io/zenml/refs/heads/main/README.md\"\n</code></pre> <p>Fetch the content from the URL</p> <pre><code>response = requests.get(url)\ntext_content = response.text\n</code></pre> <p>Define the prompt for translation</p> <pre><code>prompt = f\"Translate the following English text to Chinese: {text_content}\"\n</code></pre> <p>Generate the translated content using the Gemini API. We're using the 2.0-flash-lite model here for speed, but you probably would want to use a more powerful model for better results.</p> <pre><code>model = client.models.generate_content(\n    model=\"gemini-2.0-flash-lite\",\n    contents=prompt,\n)\n</code></pre> <p>Print the translated text</p> <pre><code>print(model.text)\n</code></pre>"},{"location":"pdfs-and-other-data-types/translate-documents/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library and requests</p> <pre><code>$ pip install google-genai requests\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python translate.py\n```chinese\n&lt;div align=\"center\"&gt;\n  &lt;img referrerpolicy=\"no-referrer-when-downgrade\" src=\"https://static.scarf.sh/a.png?x-pxid=0fcbab94-8fbe-4a38-93e8-c2348450a42e\" /&gt;\n  &lt;h1 align=\"center\"&gt;\u8d85\u8d8a\u6f14\u793a\uff1a\u751f\u4ea7\u7ea7 AI \u7cfb\u7edf&lt;/h1&gt;\n  &lt;h3 align=\"center\"&gt;ZenML \u5c06\u7ecf\u8fc7\u5b9e\u6218\u68c0\u9a8c\u7684 MLOps \u5b9e\u8df5\u5e26\u5165\u60a8\u7684 AI \u5e94\u7528\uff0c\u5904\u7406\u5927\u89c4\u6a21\u7684\u8bc4\u4f30\u3001\u76d1\u63a7\u548c\u90e8\u7f72&lt;/h3&gt;\n&lt;/div&gt;\n&lt;!-- \u9879\u76ee\u5fbd\u7ae0 --&gt;\n&lt;!--\n*** \u6211\u4f7f\u7528 Markdown \"\u5f15\u7528\u6837\u5f0f\" \u94fe\u63a5\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u3002\n*** \u5f15\u7528\u94fe\u63a5\u7528\u65b9\u62ec\u53f7 [ ] \u62ec\u8d77\u6765\uff0c\u800c\u4e0d\u662f\u7528\u62ec\u53f7 ( )\u3002\n*** \u8bf7\u53c2\u9605\u672c\u6587\u6863\u5e95\u90e8\uff0c\u4e86\u89e3\u8d21\u732e\u8005\u7f51\u5740\u3001\u5206\u652f\u7f51\u5740\u7b49\u7684\u5f15\u7528\u53d8\u91cf\u58f0\u660e\u3002 \u8fd9\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u3001\u7b80\u6d01\u7684\u8bed\u6cd5\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u3002\n*** https://www.markdownguide.org/basic-syntax/#reference-style-links\n--&gt;\n&lt;div align=\"center\"&gt;\n  &lt;!-- \u9879\u76ee Logo --&gt;\n  &lt;br /&gt;\n    &lt;a href=\"https://zenml.io\"&gt;\n      &lt;img alt=\"ZenML Logo\" src=\"docs/book/.gitbook/assets/header.png\" alt=\"ZenML Logo\"&gt;\n    &lt;/a&gt;\n  &lt;br /&gt;\netc...\n</code></pre>"},{"location":"pdfs-and-other-data-types/translate-documents/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"text/","title":"Text","text":""},{"location":"text/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>Simple text generation</p> </li> <li> <p>Streaming text</p> </li> <li> <p>System prompt</p> </li> <li> <p>Reasoning models</p> </li> <li> <p>Structured output</p> </li> </ul>"},{"location":"text/reasoning-models/","title":"Reasoning models","text":"<p>This example demonstrates how to access the reasoning trace of a Gemini model and then the final text output. Reasoning models are a new type of model that 'think' a little bit before giving a final answer. The 'thinking' response is visible in Google AI Studio but not as part of the response to an API call.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nimport os\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define a profound question about the universe</p> <pre><code>prompt = \"If the universe is expanding, what is it expanding into? Show your reasoning.\"\n</code></pre> <p>Generate content with the Gemini model</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.5-pro-exp-03-25\",\n    contents=prompt,\n)\n\nprint(response.text)\n</code></pre>"},{"location":"text/reasoning-models/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python universe_reasoning.py\nThis is a fantastic and very common question that gets to the heart of how we understand the universe based on Einstein's theory of General Relativity. The most accurate answer, according to our current understanding, is:\n**The universe isn't expanding *into* anything. Space itself is expanding.**\nHere's the reasoning:\n1.  **General Relativity's View of Spacetime:** Our everyday intuition thinks of space as a pre-existing, static container \u2013 like an empty room that things can move around *in*. General Relativity, however, describes spacetime not as a fixed background but as a dynamic entity. It can warp, bend (which we experience as gravity), and, crucially, *expand or contract*.\n2.  **Expansion is Intrinsic:** The expansion of the universe isn't like an explosion *within* a pre-existing void, where debris flies outwards *into* empty space. Instead, it's the very fabric of spacetime *itself* that is stretching. Imagine the space *between* galaxies is growing.\n3.  **Analogies (and their limitations):**\n    *   **The Rising Raisin Bread:** Imagine raisins (representing galaxies) embedded in dough (representing space). As the dough bakes and expands, all the raisins move further apart from each other. A raisin doesn't see itself as being at the center; it sees all other raisins moving away from it. Importantly, the *dough itself* is expanding.\n        *   *Limitation:* This analogy breaks down because the dough has edges and is expanding *into* the oven (an external space). Our universe, as far as we know, doesn't have an edge or an \"outside.\"\n    *   **The Expanding Balloon Surface:** Imagine drawing dots (galaxies) on the surface of a balloon. As you inflate the balloon, the rubber (space) stretches, and the distance between any two dots on the surface increases. From the perspective of any dot, all other dots are moving away. There is no \"center\" of expansion *on the surface* itself.\n        *   *Limitation:* The 2D surface of the balloon is expanding *into* the 3D space around it. General Relativity doesn't require our 3D space to be expanding into a higher-dimensional \"hyperspace.\" The expansion is an intrinsic property of our spacetime dimensions.\n4.  **No Center, No Edge:** Because space *itself* is expanding everywhere, there isn't a central point *from which* the universe is expanding. The Big Bang wasn't an explosion *at* a point *in* space; it was the beginning of the expansion *of* space, happening everywhere simultaneously. Consequently, there's no \"edge\" of the universe expanding outwards into a void.\n5.  **Infinite or Finite?**\n    *   If the universe is *infinite*, then it was always infinite. An expanding infinite universe simply becomes \"more infinite\" \u2013 the distances between objects grow, but it isn't expanding *into* anything because there's no outside to an infinite space.\n    *   If the universe is *finite* but unbounded (like the surface of the balloon, but in 3D), its total volume increases, but it still doesn't require an external space to expand into. It's self-contained.\n**In summary:** The concept of \"expanding into\" relies on the idea of an external space or container. According to General Relativity, the universe *is* the container (spacetime), and it's this container itself that is growing. There is no need for an \"outside\" for this expansion to occur.\n</code></pre>"},{"location":"text/reasoning-models/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"text/simple-text-generation/","title":"Simple text generation","text":"<p>Our first example demonstrates how to use the Gemini API to generate content with a simple prompt.</p> <pre><code>from google import genai\n</code></pre> <p>Best practice: store your API key in an environment variable and load it from there.</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\", contents=\"Explain how AI works in a few words\"\n)\nprint(response.text)\n</code></pre>"},{"location":"text/simple-text-generation/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python basic-generation.py\nAI works by learning patterns from data, then using those patterns to make predictions or generate new content. It processes information through neural networks that mimic human brain connections, identifying features and relationships to perform tasks like recognition, prediction, and generation.\n</code></pre>"},{"location":"text/simple-text-generation/#images","title":"Images","text":"<p> - Generation</p>"},{"location":"text/simple-text-generation/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"text/streaming-text/","title":"Streaming text","text":"<p>This example demonstrates how to use the Gemini API to generate text content and stream the output.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n</code></pre> <p>Call the API to generate content in streaming mode</p> <pre><code>response = client.models.generate_content_stream(\n    model=\"gemini-2.0-flash\",\n    contents=[\"Explain how AI works\"]\n)\n</code></pre> <p>Iterate over the stream of responses and print each chunk of text</p> <pre><code>for chunk in response:\n    print(chunk.text, end=\"\")\n</code></pre>"},{"location":"text/streaming-text/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python streaming-generation.py\nAI, or Artificial Intelligence, is a broad field of computer science focused on creating machines capable of performing tasks that typically require human intelligence. It involves developing algorithms and models that enable computers to learn from data, reason, solve problems, understand natural language, perceive their environment, and make decisions.\nAI can be achieved through various techniques, including:\n*   **Machine Learning (ML):** This is a core subfield of AI where machines learn from data without being explicitly programmed. ML algorithms can identify patterns, make predictions, and improve their performance over time with more data.\n*   **Deep Learning (DL):** A subfield of ML that uses artificial neural networks with multiple layers (deep neural networks) to analyze data and extract complex features. DL has been highly successful in areas like image recognition, natural language processing, and speech recognition.\n*   **Natural Language Processing (NLP):** Focuses on enabling computers to understand, interpret, and generate human language. NLP techniques are used in applications like chatbots, machine translation, and sentiment analysis.\n*   **Computer Vision:** Enables computers to \"see\" and interpret images and videos. Computer vision algorithms can identify objects, recognize faces, and analyze scenes.\n*   **Robotics:** Involves designing, constructing, operating, and applying robots. AI is often used in robotics to enable robots to perform tasks autonomously.\nAI is transforming various industries, including healthcare, finance, transportation, and manufacturing. It has the potential to solve complex problems and improve people's lives, but it also raises ethical and societal concerns that need to be addressed.\n</code></pre>"},{"location":"text/streaming-text/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"text/structured-output/","title":"Structured output","text":"<p>This example shows how to generate structured data using a pydantic model to represent Cats with name, colour, and special ability.</p> <p>Import the Gemini API and pydantic</p> <pre><code>from google import genai\nfrom pydantic import BaseModel\nimport os\n</code></pre> <p>Define a Pydantic model for a Cat</p> <pre><code>class Cat(BaseModel):\n    name: str\n    colour: str\n    special_ability: str\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Define the prompt. Note: It asks for 3 cats</p> <pre><code>prompt = \"Generate data for 3 cats, including their name, colour and special ability.\"\n</code></pre> <p>Call the API to generate content, specifying the response schema. Note that it expects a <code>list</code> and not a <code>typing.List</code> object. For some reason Gemini models are finicky about that.</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash-lite\",\n    contents=prompt,\n    config={\n        \"response_mime_type\": \"application/json\",\n        \"response_schema\": list[Cat],\n    },\n)\n</code></pre> <p>Parse the json response to a list of Cat objects</p> <pre><code>my_cats: list[Cat] = response.parsed\n</code></pre> <p>Print the generated cat data</p> <pre><code>for cat in my_cats:\n    print(\n        f\"Name: {cat.name}, Colour: {cat.colour}, Special Ability: {cat.special_ability}\"\n    )\n</code></pre>"},{"location":"text/structured-output/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library and pydantic</p> <pre><code>$ pip install google-genai pydantic\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python structured_cats.py\nName: Aria, Colour: tortoiseshell, Special Ability: Can teleport short distances\nName: Blupus, Colour: ginger, Special Ability: Understands human speech\nName: Moonshine, Colour: black and white, Special Ability: Invisible at night\n</code></pre>"},{"location":"text/structured-output/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"text/system-prompt/","title":"System prompt","text":"<p>This example demonstrates how to use system instructions to guide the model's behavior.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nfrom google.genai import types\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n</code></pre> <p>Configure the model with system instructions These instructions tell the model to act as a pirate</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    config=types.GenerateContentConfig(\n        system_instruction=\"You are a pirate.  Answer all questions like a pirate.\"),\n    contents=\"Hello there\"\n)\n</code></pre> <p>Print the model's response</p> <pre><code>print(response.text)\n</code></pre>"},{"location":"text/system-prompt/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python system_instructions.py\nAhoy there, matey! What be on yer mind?\n</code></pre>"},{"location":"text/system-prompt/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"token-counting-context-windows/","title":"Token counting &amp; context windows","text":""},{"location":"token-counting-context-windows/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>Model context windows</p> </li> <li> <p>Counting chat tokens</p> </li> <li> <p>Calculating multimodal input tokens</p> </li> <li> <p>Context caching</p> </li> </ul>"},{"location":"token-counting-context-windows/calculating-multimodal-input-tokens/","title":"Calculating multimodal input tokens","text":"<p>This example demonstrates how to calculate input tokens for different data types when using the Gemini API, including images, video, and audio.</p> <p>Images are tokenized based on their dimensions. With Gemini 2.0, image inputs with both dimensions &lt;=384 pixels are counted as 258 tokens. Images larger in one or both dimensions are cropped and scaled as needed into tiles of 768x768 pixels, each counted as 258 tokens.</p> <pre><code>def calculate_image_tokens(width, height):\n    if width &lt;= 384 and height &lt;= 384:\n        return 258\n    else:\n        tiles_width = (width + 767) // 768\n        tiles_height = (height + 767) // 768\n        return tiles_width * tiles_height * 258\n</code></pre> <p>Video is tokenized at a fixed rate of 263 tokens per second.</p> <pre><code>def calculate_video_tokens(duration_seconds):\n    return duration_seconds * 263\n</code></pre> <p>Audio is tokenized at a fixed rate of 32 tokens per second.</p> <pre><code>def calculate_audio_tokens(duration_seconds):\n    return duration_seconds * 32\n</code></pre> <p>Example Usage</p> <pre><code>image_width = 600\nimage_height = 400\nimage_tokens = calculate_image_tokens(image_width, image_height)\nprint(\n    f\"Image with dimensions {image_width}x{image_height} will cost {image_tokens} tokens.\"\n)\n\nvideo_duration = 10  # seconds\nvideo_tokens = calculate_video_tokens(video_duration)\nprint(f\"Video with duration {video_duration} seconds will cost {video_tokens} tokens.\")\n\naudio_duration = 30  # seconds\naudio_tokens = calculate_audio_tokens(audio_duration)\nprint(f\"Audio with duration {audio_duration} seconds will cost {audio_tokens} tokens.\")\n</code></pre>"},{"location":"token-counting-context-windows/calculating-multimodal-input-tokens/#running-the-example","title":"Running the Example","text":"<p>Then run the program with Python</p> <pre><code>$ python multimodal_token_calculator.py\nImage with dimensions 600x400 will cost 258 tokens.\nVideo with duration 10 seconds will cost 2630 tokens.\nAudio with duration 30 seconds will cost 960 tokens.\n</code></pre>"},{"location":"token-counting-context-windows/calculating-multimodal-input-tokens/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"token-counting-context-windows/context-caching/","title":"Context caching","text":"<p>This example demonstrates how to use the Gemini API's context caching feature to efficiently query a large document multiple times without resending it with each request. This can reduce costs when repeatedly referencing the same content.</p> <pre><code>from google import genai\nfrom google.genai.types import CreateCachedContentConfig, GenerateContentConfig\nimport os\nimport time\nimport requests\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Specify a versioned model that supports context caching Note: Must use explicit version suffix (-001) for caching</p> <pre><code>model_id = \"gemini-1.5-flash-001\"\n</code></pre> <p>Load a large document (e.g., technical documentation). For this example, we assume the document is in markdown format.</p> <pre><code>response = requests.get(\"https://zenml.io/llms.txt\")\nresponse.raise_for_status()  # Raise an exception for HTTP errors\napi_docs = response.text\n</code></pre> <p>Create a cache with the document and system instructions</p> <pre><code>cache = client.caches.create(\n    model=model_id,\n    config=CreateCachedContentConfig(\n        display_name=\"ZenML LLMs.txt Documentation Cache\",  # Used to identify the cache\n        system_instruction=(\n            \"You are a technical documentation expert. \"\n            \"Answer questions about the ZenML documentation provided. \"\n            \"Keep your answers concise and to the point.\"\n        ),\n        contents=[api_docs],\n        ttl=\"900s\",  # Cache for 15 minutes\n    ),\n)\n</code></pre> <p>Display cache information</p> <pre><code>print(f\"Cache created with name: {cache.name}\")\nprint(f\"Cached token count: {cache.usage_metadata.total_token_count}\")\nprint(f\"Cache expires at: {cache.expire_time}\")\n</code></pre> <p>Define multiple queries to demonstrate reuse of cached content</p> <pre><code>queries = [\n    \"What are the recommended use cases for ZenML's pipeline orchestration?\",\n    \"How does ZenML integrate with cloud providers?\",\n]\n</code></pre> <p>Run multiple queries using the same cached content</p> <pre><code>for query in queries:\n    print(f\"\\nQuery: {query}\")\n</code></pre> <p>Generate response using the cached content</p> <pre><code>response = client.models.generate_content(\n        model=model_id,\n        contents=query,\n        config=GenerateContentConfig(cached_content=cache.name),\n    )\n</code></pre> <p>Print token usage statistics to demonstrate savings</p> <pre><code>print(f\"Total tokens: {response.usage_metadata.total_token_count}\")\n    print(f\"Cached tokens: {response.usage_metadata.cached_content_token_count}\")\n    print(f\"Output tokens: {response.usage_metadata.candidates_token_count}\")\n</code></pre> <p>Print the response (truncated for brevity)</p> <pre><code>print(f\"Response: {response.text}...\")\n\n    time.sleep(1)  # Short delay between requests\n</code></pre> <p>When done with the cache, you can delete it to free up resources</p> <pre><code>client.caches.delete(name=cache.name)\n</code></pre>"},{"location":"token-counting-context-windows/context-caching/#running-the-example","title":"Running the Example","text":"<p>Install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Run the Python script</p> <pre><code>$ python context-caching.py\nCache created with name: cachedContents/n8upgecthnz7\nCached token count: 107203\nCache expires at: 2025-04-05 20:21:48.818511+00:00\nQuery: What are the recommended use cases for ZenML's pipeline orchestration?\nTotal tokens: 107387\nCached tokens: 107203\nOutput tokens: 168\nResponse: ZenML's pipeline orchestration is well-suited for a wide range of machine learning workflows, including:\n* **Data preprocessing:**  Ingesting, cleaning, transforming, and preparing data for model training.\n* **Model training:**  Training various types of machine learning models, including deep learning models.\n* **Model evaluation:**  Assessing model performance using different metrics and techniques.\n* **Model deployment:**  Deploying trained models to different environments for inference.\n* **Model monitoring:**  Monitoring the performance and health of deployed models in real-time.\n* **A/B testing:**  Experimenting with different model variations and comparing their performance.\n* **Hyperparameter tuning:**  Finding optimal hyperparameters for models.\n* **Feature engineering:**  Developing and evaluating new features for improving model performance. \n...\nQuery: How does ZenML integrate with cloud providers?\nTotal tokens: 107326\nCached tokens: 107203\nOutput tokens: 113\nResponse: ZenML integrates with cloud providers by offering stack components that are specific to each provider, such as:\n* **Artifact Stores:** S3 (AWS), GCS (GCP), Azure Blob Storage (Azure)\n* **Orchestrators:** Skypilot (AWS, GCP, Azure), Kubernetes (AWS, GCP, Azure)\n* **Container Registries:** ECR (AWS), GCR (GCP), ACR (Azure)\nThese components allow you to run pipelines on cloud infrastructure, enabling you to scale and leverage the benefits of cloud computing. \n...\n</code></pre>"},{"location":"token-counting-context-windows/context-caching/#further-information","title":"Further Information","text":"<ul> <li> <p>Gemini docs link 1</p> </li> <li> <p>Gemini docs link 2</p> </li> </ul>"},{"location":"token-counting-context-windows/counting-chat-tokens/","title":"Counting chat tokens","text":"<p>This example demonstrates how to count tokens in a chat history with the Gemini API, incorporating a cat theme.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nfrom google.genai import types\nimport os\n</code></pre> <p>Configure the Gemini API with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Start a chat session with a cat-related history</p> <pre><code>chat = client.chats.create(\n    model=\"gemini-2.0-flash\",\n    history=[\n        types.Content(role=\"user\", parts=[types.Part(text=\"Hey there! I love cats!\")]),\n        types.Content(\n            role=\"model\",\n            parts=[\n                types.Part(\n                    text=\"Me too! Cats are the best. What's your favorite breed?\"\n                )\n            ],\n        ),\n    ],\n)\n</code></pre> <p>Count the tokens in the initial chat history</p> <pre><code>token_count = client.models.count_tokens(\n    model=\"gemini-2.0-flash\", contents=chat.get_history()\n)\nprint(f\"Tokens in initial chat history: {token_count.total_tokens} tokens\")\n</code></pre> <p>Send a new message to the chat, asking about cat breeds</p> <pre><code>response = chat.send_message(message=\"Tell me more about Ragdoll cats.\")\n</code></pre> <p>Print the token usage metadata from the response</p> <pre><code>print(\n    f\"Token usage for the last turn: input_tokens={response.usage_metadata.prompt_token_count}, output_tokens={response.usage_metadata.candidates_token_count}, total_tokens={response.usage_metadata.total_token_count}\"\n)\n</code></pre> <p>Count tokens including next turn question</p> <pre><code>extra = types.UserContent(\n    parts=[\n        types.Part(\n            text=\"Do you know Neko the cat?\",\n        )\n    ]\n)\nhistory = chat.get_history()\nhistory.append(extra)\nfinal_count = client.models.count_tokens(model=\"gemini-2.0-flash\", contents=history)\nprint(f\"Total tokens with additional question: {final_count.total_tokens} tokens\")\n</code></pre>"},{"location":"token-counting-context-windows/counting-chat-tokens/#running-the-example","title":"Running the Example","text":"<p>Install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Run the Python script</p> <pre><code>$ python count_chat_tokens.py\nTokens in initial chat history: 24 tokens\nToken usage for the last turn: input_tokens=30, output_tokens=843, total_tokens=873\nTotal tokens with additional question: 892 tokens\n</code></pre>"},{"location":"token-counting-context-windows/counting-chat-tokens/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"token-counting-context-windows/model-context-windows/","title":"Model context windows","text":"<p>This example demonstrates how to access the input and output token limits for different Gemini models.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nimport os\n</code></pre> <p>Configure the client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n</code></pre> <p>Get information about the gemini-2.0-flash model</p> <pre><code>model_info = client.models.get(model=\"models/gemini-2.0-flash\")\n</code></pre> <p>Print the input and output token limits for gemini-2.0-flash</p> <pre><code>print(\"Gemini 2.0 Flash:\")\nprint(\n    f\"  Input token limit: {model_info.input_token_limit:,} tokens (1 million tokens)\"\n)\nprint(\n    f\"  Output token limit: {model_info.output_token_limit:,} tokens (8 thousand tokens)\"\n)\n</code></pre> <p>Get information about the gemini-2.5-pro-preview-03-25 model</p> <pre><code>pro_model_info = client.models.get(model=\"models/gemini-2.5-pro-preview-03-25\")\n</code></pre> <p>Print the input and output token limits for gemini-2.5-pro-preview-03-25</p> <pre><code>print(\"\\nGemini 2.5 Pro:\")\nprint(\n    f\"  Input token limit: {pro_model_info.input_token_limit:,} tokens (1 million tokens)\"\n)\nprint(\n    f\"  Output token limit: {pro_model_info.output_token_limit:,} tokens (65 thousand tokens)\"\n)\n</code></pre>"},{"location":"token-counting-context-windows/model-context-windows/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python model_context.py\nGemini 2.0 Flash:\n  Input token limit: 1,048,576 tokens (1 million tokens)\n  Output token limit: 8,192 tokens (8 thousand tokens)\nGemini 2.5 Pro:\n  Input token limit: 1,048,576 tokens (1 million tokens)\n  Output token limit: 65,536 tokens (65 thousand tokens)\n</code></pre>"},{"location":"token-counting-context-windows/model-context-windows/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"video/","title":"Video","text":""},{"location":"video/#examples-in-this-section","title":"Examples in this section","text":"<ul> <li> <p>Video question answering</p> </li> <li> <p>Video summarization</p> </li> <li> <p>Video transcription</p> </li> <li> <p>YouTube video summarization</p> </li> </ul>"},{"location":"video/video-question-answering/","title":"Video question answering","text":"<p>This example demonstrates how to ask questions about a video using the Gemini API. Note: For videos larger than 20MB, you must use the File API for uploading.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nfrom google.genai import types\nimport os\nimport requests\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n\nvideo_url = \"https://download.samplelib.com/mp4/sample-5s.mp4\"\n</code></pre> <p>Download the video file. Read the video file as bytes for inline upload.</p> <pre><code>response = requests.get(video_url)\nvideo_bytes = response.content\n</code></pre> <p>Create a Gemini request with the video and a question</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=types.Content(\n        parts=[\n            types.Part(text=\"Describe the tone and genre of this video.\"),\n            types.Part(inline_data=types.Blob(data=video_bytes, mime_type=\"video/mp4\")),\n        ]\n    ),\n)\n</code></pre> <p>Print the model's response</p> <pre><code>print(response.text)\n</code></pre>"},{"location":"video/video-question-answering/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python video_question_answering.py\nCertainly! Here's a description of the tone and genre of the video clip:\n**Genre:**  Travel or scenery/ambient video\n**Tone:** Relaxed, peaceful, and observational. The video presents a serene view of a park next to a busy street. The presence of nature with the sounds of the city creates a tranquil atmosphere.\n</code></pre>"},{"location":"video/video-question-answering/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"video/video-summarization/","title":"Video summarization","text":"<p>This example demonstrates how to summarize the content of a video using the Gemini API. Note: For videos larger than 20MB, you must use the File API for uploading.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nfrom google.genai import types\nimport os\nimport requests\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n\nvideo_url = \"https://download.samplelib.com/mp4/sample-5s.mp4\"\n</code></pre> <p>Download the video file. Read the video file as bytes for inline upload.</p> <pre><code>response = requests.get(video_url)\nvideo_bytes = response.content\n</code></pre> <p>Create a Gemini request with the video and a question</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=types.Content(\n        parts=[\n            types.Part(text=\"Summarize the content of this video.\"),\n            types.Part(inline_data=types.Blob(data=video_bytes, mime_type=\"video/mp4\")),\n        ]\n    ),\n)\n</code></pre> <p>Print the model's response</p> <pre><code>print(response.text)\n</code></pre>"},{"location":"video/video-summarization/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python video_summarization.py\nThe video shows a park with trees next to a busy street with cars and buses passing by. The sun shines through the leaves of the trees.\n</code></pre>"},{"location":"video/video-summarization/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"video/video-transcription/","title":"Video transcription","text":"<p>This example demonstrates how to transcribe the content of a video using the Gemini API. Note: For videos larger than 20MB, you must use the File API for uploading.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\nfrom google.genai import types\nimport os\nimport requests\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n\nvideo_url = \"https://download.samplelib.com/mp4/sample-5s.mp4\"\n</code></pre> <p>Download the video file. Read the video file as bytes for inline upload.</p> <pre><code>response = requests.get(video_url)\nvideo_bytes = response.content\n</code></pre> <p>Define our prompt</p> <pre><code>prompt = (\n    \"Transcribe the audio from this video, giving timestamps for \"\n    \"salient events in the video. Also provide visual descriptions.\"\n)\n</code></pre> <p>Create a Gemini request with the video and our prompt.</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=types.Content(\n        parts=[\n            types.Part(text=prompt),\n            types.Part(inline_data=types.Blob(data=video_bytes, mime_type=\"video/mp4\")),\n        ]\n    ),\n)\n</code></pre> <p>Print the model's response</p> <pre><code>print(response.text)\n</code></pre>"},{"location":"video/video-transcription/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python video_transcription.py\nOkay, here's the transcription and visual descriptions of the video:\n**Video Description:**\nThe video pans up from a low angle showing a park with lush green trees.  Sunlight filters through the leaves. In the distance, cars and a bus can be seen on a road next to the park. There is a paved walkway and low bushes.\n**Timestamps:**\n*   **0:00** Camera starts panning up showing a park with trees and sunlight. \n*   **0:04** The camera reaches its highest point in its view.\n</code></pre>"},{"location":"video/video-transcription/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"},{"location":"video/youtube-video-summarization/","title":"YouTube video summarization","text":"<p>This example demonstrates how to summarize a YouTube video using its URL.</p> <p>Import the Gemini API</p> <pre><code>from google import genai\n</code></pre> <p>Initialize the Gemini client with your API key</p> <pre><code>client = genai.Client(api_key=\"YOUR_API_KEY\")\n</code></pre> <p>Construct the prompt with the YouTube video URL</p> <pre><code>youtube_url = \"https://www.youtube.com/watch?v=tAP1eZYEuKA\"\nprompt = f\"Summarize the content of this YouTube video: {youtube_url}\"\n</code></pre> <p>Call the API to generate content</p> <pre><code>response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\n        {\n            \"parts\": [\n                {\"text\": \"Can you summarize this video?\"},\n                {\"file_data\": {\"file_uri\": youtube_url}},\n            ]\n        }\n    ],\n)\n</code></pre> <p>Print the generated summary</p> <pre><code>print(response.text)\n</code></pre>"},{"location":"video/youtube-video-summarization/#running-the-example","title":"Running the Example","text":"<p>First, install the Google Generative AI library</p> <pre><code>$ pip install google-genai\n</code></pre> <p>Then run the program with Python</p> <pre><code>$ python youtube-summarization.py\nSure, here is a summary of the video!\nThomas, the father, is sharing his son Max's story of having Alexander Disease, a rare ultra-rare genetic disorder. After having a difficult time conceiving and finally being successful and welcoming Max to their family, they were dealt a devastating blow when Max had his first seizure at a very young age. \nBecause of the seizure, Max had to go through a series of medical tests. Those tests showed that Max had Alexander Disease. After doing some research, the family was heartbroken, as the typical life expectancy for this disease is 5-10 years, and there is no treatment or cure.\nThomas started researching more in-depth by summarizing scientific papers by using Gemini AI and has discovered a lead scientist and her team in New York that he connected with. He sends one to two emails a week to different scientists in order to get more studies underway for the disease. He doesn't want Max to be seen as having 'zero' chance and wants to be a dad and enjoy his time with Max. He will continue to strive to find a cure for Max!\n</code></pre>"},{"location":"video/youtube-video-summarization/#further-information","title":"Further Information","text":"<ul> <li>Gemini docs link 1</li> </ul>"}]}